package seveida.firetvforreddit.response.objects;

import java.util.List;
import com.squareup.moshi.Json;

public class Data_ {

    @Json(name = "approved_at_utc")
    public Object approvedAtUtc;
    @Json(name = "subreddit")
    public String subreddit;
    @Json(name = "selftext")
    public String selftext;
    @Json(name = "author_fullname")
    public String authorFullname;
    @Json(name = "saved")
    public boolean saved;
    @Json(name = "mod_reason_title")
    public Object modReasonTitle;
    @Json(name = "gilded")
    public int gilded;
    @Json(name = "clicked")
    public boolean clicked;
    @Json(name = "title")
    public String title;
    @Json(name = "link_flair_richtext")
    public List<Object> linkFlairRichtext = null;
    @Json(name = "subreddit_name_prefixed")
    public String subredditNamePrefixed;
    @Json(name = "hidden")
    public boolean hidden;
    @Json(name = "pwls")
    public Object pwls;
    @Json(name = "link_flair_css_class")
    public Object linkFlairCssClass;
    @Json(name = "downs")
    public int downs;
    @Json(name = "thumbnail_height")
    public int thumbnailHeight;
    @Json(name = "hide_score")
    public boolean hideScore;
    @Json(name = "name")
    public String name;
    @Json(name = "quarantine")
    public boolean quarantine;
    @Json(name = "link_flair_text_color")
    public String linkFlairTextColor;
    @Json(name = "author_flair_background_color")
    public Object authorFlairBackgroundColor;
    @Json(name = "subreddit_type")
    public String subredditType;
    @Json(name = "ups")
    public int ups;
    @Json(name = "domain")
    public String domain;
    @Json(name = "media_embed")
    public MediaEmbed mediaEmbed;
    @Json(name = "thumbnail_width")
    public int thumbnailWidth;
    @Json(name = "author_flair_template_id")
    public Object authorFlairTemplateId;
    @Json(name = "is_original_content")
    public boolean isOriginalContent;
    @Json(name = "user_reports")
    public List<Object> userReports = null;
    @Json(name = "secure_media")
    public Object secureMedia;
    @Json(name = "is_reddit_media_domain")
    public boolean isRedditMediaDomain;
    @Json(name = "is_meta")
    public boolean isMeta;
    @Json(name = "category")
    public Object category;
    @Json(name = "secure_media_embed")
    public SecureMediaEmbed secureMediaEmbed;
    @Json(name = "link_flair_text")
    public Object linkFlairText;
    @Json(name = "can_mod_post")
    public boolean canModPost;
    @Json(name = "score")
    public int score;
    @Json(name = "approved_by")
    public Object approvedBy;
    @Json(name = "thumbnail")
    public String thumbnail;
    @Json(name = "edited")
    public boolean edited;
    @Json(name = "author_flair_css_class")
    public Object authorFlairCssClass;
    @Json(name = "author_flair_richtext")
    public List<Object> authorFlairRichtext = null;
    @Json(name = "gildings")
    public Gildings gildings;
    @Json(name = "post_hint")
    public String postHint;
    @Json(name = "content_categories")
    public Object contentCategories;
    @Json(name = "is_self")
    public boolean isSelf;
    @Json(name = "mod_note")
    public Object modNote;
    @Json(name = "created")
    public int created;
    @Json(name = "link_flair_type")
    public String linkFlairType;
    @Json(name = "wls")
    public Object wls;
    @Json(name = "banned_by")
    public Object bannedBy;
    @Json(name = "author_flair_type")
    public String authorFlairType;
    @Json(name = "contest_mode")
    public boolean contestMode;
    @Json(name = "selftext_html")
    public Object selftextHtml;
    @Json(name = "likes")
    public Object likes;
    @Json(name = "suggested_sort")
    public Object suggestedSort;
    @Json(name = "banned_at_utc")
    public Object bannedAtUtc;
    @Json(name = "view_count")
    public Object viewCount;
    @Json(name = "archived")
    public boolean archived;
    @Json(name = "no_follow")
    public boolean noFollow;
    @Json(name = "is_crosspostable")
    public boolean isCrosspostable;
    @Json(name = "pinned")
    public boolean pinned;
    @Json(name = "over_18")
    public boolean over18;
    @Json(name = "preview")
    public Preview preview;
    @Json(name = "media_only")
    public boolean mediaOnly;
    @Json(name = "link_flair_template_id")
    public Object linkFlairTemplateId;
    @Json(name = "can_gild")
    public boolean canGild;
    @Json(name = "spoiler")
    public boolean spoiler;
    @Json(name = "locked")
    public boolean locked;
    @Json(name = "author_flair_text")
    public Object authorFlairText;
    @Json(name = "visited")
    public boolean visited;
    @Json(name = "num_reports")
    public Object numReports;
    @Json(name = "distinguished")
    public Object distinguished;
    @Json(name = "subreddit_id")
    public String subredditId;
    @Json(name = "mod_reason_by")
    public Object modReasonBy;
    @Json(name = "removal_reason")
    public Object removalReason;
    @Json(name = "link_flair_background_color")
    public String linkFlairBackgroundColor;
    @Json(name = "id")
    public String id;
    @Json(name = "is_robot_indexable")
    public boolean isRobotIndexable;
    @Json(name = "report_reasons")
    public Object reportReasons;
    @Json(name = "author")
    public String author;
    @Json(name = "num_crossposts")
    public int numCrossposts;
    @Json(name = "num_comments")
    public int numComments;
    @Json(name = "send_replies")
    public boolean sendReplies;
    @Json(name = "whitelist_status")
    public Object whitelistStatus;
    @Json(name = "mod_reports")
    public List<Object> modReports = null;
    @Json(name = "author_patreon_flair")
    public boolean authorPatreonFlair;
    @Json(name = "author_flair_text_color")
    public Object authorFlairTextColor;
    @Json(name = "permalink")
    public String permalink;
    @Json(name = "parent_whitelist_status")
    public Object parentWhitelistStatus;
    @Json(name = "stickied")
    public boolean stickied;
    @Json(name = "url")
    public String url;
    @Json(name = "subreddit_subscribers")
    public int subredditSubscribers;
    @Json(name = "created_utc")
    public int createdUtc;
    @Json(name = "media")
    public Object media;
    @Json(name = "is_video")
    public boolean isVideo;

    /**
     * No args constructor for use in serialization
     *
     */
    public Data_() {
    }

    /**
     *
     * @param selftextHtml
     * @param pwls
     * @param mediaOnly
     * @param isOriginalContent
     * @param score
     * @param subredditId
     * @param authorFlairType
     * @param authorFlairCssClass
     * @param secureMediaEmbed
     * @param modReports
     * @param clicked
     * @param numComments
     * @param authorPatreonFlair
     * @param canGild
     * @param authorFullname
     * @param linkFlairText
     * @param created
     * @param linkFlairTemplateId
     * @param contestMode
     * @param over18
     * @param bannedBy
     * @param subredditSubscribers
     * @param modReasonTitle
     * @param postHint
     * @param createdUtc
     * @param stickied
     * @param linkFlairType
     * @param linkFlairCssClass
     * @param noFollow
     * @param saved
     * @param distinguished
     * @param mediaEmbed
     * @param linkFlairTextColor
     * @param url
     * @param authorFlairText
     * @param subreddit
     * @param reportReasons
     * @param authorFlairTemplateId
     * @param category
     * @param parentWhitelistStatus
     * @param thumbnail
     * @param permalink
     * @param preview
     * @param likes
     * @param gildings
     * @param isRedditMediaDomain
     * @param locked
     * @param thumbnailWidth
     * @param media
     * @param viewCount
     * @param whitelistStatus
     * @param quarantine
     * @param isCrosspostable
     * @param approvedBy
     * @param suggestedSort
     * @param isVideo
     * @param id
     * @param modReasonBy
     * @param visited
     * @param subredditNamePrefixed
     * @param userReports
     * @param author
     * @param approvedAtUtc
     * @param title
     * @param modNote
     * @param isRobotIndexable
     * @param archived
     * @param pinned
     * @param name
     * @param domain
     * @param sendReplies
     * @param isSelf
     * @param authorFlairBackgroundColor
     * @param numReports
     * @param secureMedia
     * @param edited
     * @param removalReason
     * @param linkFlairBackgroundColor
     * @param subredditType
     * @param spoiler
     * @param authorFlairRichtext
     * @param thumbnailHeight
     * @param authorFlairTextColor
     * @param contentCategories
     * @param gilded
     * @param linkFlairRichtext
     * @param hideScore
     * @param isMeta
     * @param hidden
     * @param numCrossposts
     * @param wls
     * @param canModPost
     * @param downs
     * @param ups
     * @param selftext
     * @param bannedAtUtc
     */
    public Data_(Object approvedAtUtc, String subreddit, String selftext, String authorFullname, boolean saved, Object modReasonTitle, int gilded, boolean clicked, String title, List<Object> linkFlairRichtext, String subredditNamePrefixed, boolean hidden, Object pwls, Object linkFlairCssClass, int downs, int thumbnailHeight, boolean hideScore, String name, boolean quarantine, String linkFlairTextColor, Object authorFlairBackgroundColor, String subredditType, int ups, String domain, MediaEmbed mediaEmbed, int thumbnailWidth, Object authorFlairTemplateId, boolean isOriginalContent, List<Object> userReports, Object secureMedia, boolean isRedditMediaDomain, boolean isMeta, Object category, SecureMediaEmbed secureMediaEmbed, Object linkFlairText, boolean canModPost, int score, Object approvedBy, String thumbnail, boolean edited, Object authorFlairCssClass, List<Object> authorFlairRichtext, Gildings gildings, String postHint, Object contentCategories, boolean isSelf, Object modNote, int created, String linkFlairType, Object wls, Object bannedBy, String authorFlairType, boolean contestMode, Object selftextHtml, Object likes, Object suggestedSort, Object bannedAtUtc, Object viewCount, boolean archived, boolean noFollow, boolean isCrosspostable, boolean pinned, boolean over18, Preview preview, boolean mediaOnly, Object linkFlairTemplateId, boolean canGild, boolean spoiler, boolean locked, Object authorFlairText, boolean visited, Object numReports, Object distinguished, String subredditId, Object modReasonBy, Object removalReason, String linkFlairBackgroundColor, String id, boolean isRobotIndexable, Object reportReasons, String author, int numCrossposts, int numComments, boolean sendReplies, Object whitelistStatus, List<Object> modReports, boolean authorPatreonFlair, Object authorFlairTextColor, String permalink, Object parentWhitelistStatus, boolean stickied, String url, int subredditSubscribers, int createdUtc, Object media, boolean isVideo) {
        super();
        this.approvedAtUtc = approvedAtUtc;
        this.subreddit = subreddit;
        this.selftext = selftext;
        this.authorFullname = authorFullname;
        this.saved = saved;
        this.modReasonTitle = modReasonTitle;
        this.gilded = gilded;
        this.clicked = clicked;
        this.title = title;
        this.linkFlairRichtext = linkFlairRichtext;
        this.subredditNamePrefixed = subredditNamePrefixed;
        this.hidden = hidden;
        this.pwls = pwls;
        this.linkFlairCssClass = linkFlairCssClass;
        this.downs = downs;
        this.thumbnailHeight = thumbnailHeight;
        this.hideScore = hideScore;
        this.name = name;
        this.quarantine = quarantine;
        this.linkFlairTextColor = linkFlairTextColor;
        this.authorFlairBackgroundColor = authorFlairBackgroundColor;
        this.subredditType = subredditType;
        this.ups = ups;
        this.domain = domain;
        this.mediaEmbed = mediaEmbed;
        this.thumbnailWidth = thumbnailWidth;
        this.authorFlairTemplateId = authorFlairTemplateId;
        this.isOriginalContent = isOriginalContent;
        this.userReports = userReports;
        this.secureMedia = secureMedia;
        this.isRedditMediaDomain = isRedditMediaDomain;
        this.isMeta = isMeta;
        this.category = category;
        this.secureMediaEmbed = secureMediaEmbed;
        this.linkFlairText = linkFlairText;
        this.canModPost = canModPost;
        this.score = score;
        this.approvedBy = approvedBy;
        this.thumbnail = thumbnail;
        this.edited = edited;
        this.authorFlairCssClass = authorFlairCssClass;
        this.authorFlairRichtext = authorFlairRichtext;
        this.gildings = gildings;
        this.postHint = postHint;
        this.contentCategories = contentCategories;
        this.isSelf = isSelf;
        this.modNote = modNote;
        this.created = created;
        this.linkFlairType = linkFlairType;
        this.wls = wls;
        this.bannedBy = bannedBy;
        this.authorFlairType = authorFlairType;
        this.contestMode = contestMode;
        this.selftextHtml = selftextHtml;
        this.likes = likes;
        this.suggestedSort = suggestedSort;
        this.bannedAtUtc = bannedAtUtc;
        this.viewCount = viewCount;
        this.archived = archived;
        this.noFollow = noFollow;
        this.isCrosspostable = isCrosspostable;
        this.pinned = pinned;
        this.over18 = over18;
        this.preview = preview;
        this.mediaOnly = mediaOnly;
        this.linkFlairTemplateId = linkFlairTemplateId;
        this.canGild = canGild;
        this.spoiler = spoiler;
        this.locked = locked;
        this.authorFlairText = authorFlairText;
        this.visited = visited;
        this.numReports = numReports;
        this.distinguished = distinguished;
        this.subredditId = subredditId;
        this.modReasonBy = modReasonBy;
        this.removalReason = removalReason;
        this.linkFlairBackgroundColor = linkFlairBackgroundColor;
        this.id = id;
        this.isRobotIndexable = isRobotIndexable;
        this.reportReasons = reportReasons;
        this.author = author;
        this.numCrossposts = numCrossposts;
        this.numComments = numComments;
        this.sendReplies = sendReplies;
        this.whitelistStatus = whitelistStatus;
        this.modReports = modReports;
        this.authorPatreonFlair = authorPatreonFlair;
        this.authorFlairTextColor = authorFlairTextColor;
        this.permalink = permalink;
        this.parentWhitelistStatus = parentWhitelistStatus;
        this.stickied = stickied;
        this.url = url;
        this.subredditSubscribers = subredditSubscribers;
        this.createdUtc = createdUtc;
        this.media = media;
        this.isVideo = isVideo;
    }

}
